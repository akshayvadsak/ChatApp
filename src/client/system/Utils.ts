import { DocumentData, QueryDocumentSnapshot } from "firebase/firestore";
import { ProfileModel } from "../user/Profile";
import ac from './../user/Permissions';
import {User, UserModel} from './../user/User'

export class Utils
{
    public static GetRandomInt(max:number) {
      return Math.floor(Math.random() * max);
    }

    private static FourLengthRandomString(): string {
      return Math.floor((1 + Math.random()) * 0x10000)
        .toString(16)
        .substring(1);
    }

    public static GenerateRandomID(): string {
      let first = this.FourLengthRandomString();
      let second = this.FourLengthRandomString();

      return first + "-" + second;
    }

    public static GetFirestoreImageRef(url: string): string 
    {

      //console.log(`Image Url: ${url}`);
      let temp = url.replace("https://firebasestorage.googleapis.com/v0/b/chat-hub-1.appspot.com/o/", "");
      //console.log(`Update: ${temp}`);
      temp = temp.replaceAll("%2F", "/");
      //console.log(`Update 2: ${temp}`);
      let tempArr = temp.split("?alt");
      //console.log(`Update 3: ${tempArr[0]}`);

      return tempArr[0];
    }

    public static ComputeAge(birthdate: string) : number
    {
      if (!birthdate)
        return -1;

      var today = new Date();
      var birthDate = new Date(birthdate);
      var age_now = today.getFullYear() - birthDate.getFullYear();
      var m = today.getMonth() - birthDate.getMonth();
      if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {
        age_now--;
      }
      //console.log(`Age Now: ${age_now}`)
      return age_now;
    }

    public static ParseDataToUserModel(data: DocumentData): UserModel
    {
      let userModel = new UserModel(
        {
          uuid: data.uuid,
          displayName: data.displayName,
          email: data.email,
          photoURL: data.photoURL,
          profileReference: data.profileReference,
          birthday: data.birthday,
          age: Utils.ComputeAge(data.birthday),
          gender: data.gender,
          weight: data.weight,
          height: data.height,
          maritalStatus: data.maritalStatus,
          bodyType: data.bodyType,
          ethnicity: data.ethnicity,
          hairColor: data.hairColor,
          eyeColor: data.eyeColor,
          sexualOrientation: data.sexualOrientation,
          country: data.country,
          language: data.language,
          aboutMe: data.aboutMe,
          lookingFor: data.lookingFor,
          tags: data.tags,
          userType: data.userType ? data.userType : 'user',
          siteOfOrigin: data.siteOfOrigin ? data.siteOfOrigin : '',
          likedProfiles: data.likedProfiles,
          profilesLikedYou: data.profilesLikedYou,
          lastLoggedIn: data.lastLoggedIn,
          createdProfiles: data.createdProfiles,
          credits: data.credits,
          geolocation: data.geolocation ? new Map([
            ["countryCode", data.geolocation.countryCode],
            ["countryName", data.geolocation.countryName],
            ["city", data.geolocation.city],
            ["state", data.geolocation.state]
          ]) : null as any,
          ageOfChattedProfiles: data.ageOfChattedProfiles,
          raceOfChattedProfiles: data.raceOfChattedProfiles,
          isPaidUser: data.isPaidUser ? data.isPaidUser : false,
          isTestAccount: data.isTestAccount ? data.isTestAccount : false,
          isAutoGenerated: data.isAutoGenerated ? data.isAutoGenerated : false
        });

        return userModel;
    }

  public static ParseDataToProfileModel(doc: QueryDocumentSnapshot<DocumentData>): ProfileModel {
    let data = doc.data();
    let profileModel = new ProfileModel(
      {
        id: doc.id,
        displayName: data.displayName,
        photoURL: data.photoURL,
        controllerUuid: data.controllerUuid,
        birthday: data.birthday,
        age: Utils.ComputeAge(data.birthday),
        gender: data.gender,
        weight: data.weight,
        height: data.height,
        maritalStatus: data.maritalStatus,
        bodyType: data.bodyType,
        ethnicity: data.ethnicity,
        hairColor: data.hairColor,
        eyeColor: data.eyeColor,
        sexualOrientation: data.sexualOrientation,
        city: data.city,
        country: data.country,
        language: data.language,
        aboutMe: data.aboutMe,
        lookingFor: data.lookingFor,
        tags: data.tags,
        status: data.status,
        sites: data.sites,
        creator: data.creator
      }
    );
    return profileModel
  }

    public static RefreshPage()
    {
      window.location.reload();
    }

    public static checkAccess = (action: string,accessTo: string) => {

      const userRole = User.Model?.userType;
      let permission = false;
      if(!permission){
        switch (action) {
          case "createAny" : {
            const perm = ac.can(String(userRole)).createAny(accessTo);
            if(perm.granted){
              permission = true;
            }
            break;
          }
          case "updateAny" : {
            const perm = ac.can(String(userRole)).updateAny(accessTo);
            if(perm.granted){
              permission = true;
            }
            break;
          }
          case "deleteAny" : {
            const perm = ac.can(String(userRole)).deleteAny(accessTo);
            if(perm.granted){
              permission = true;
            }
            break;
          }
          case "readAny" : {
            const perm = ac.can(String(userRole)).readAny(accessTo)
            if(perm.granted){
              permission = true;
            }
            break;
          }
          default : {
            const perm = ac.can(String(userRole)).readAny(accessTo)
            if(perm.granted){
              permission = true;
            }
            break;
          }
        }
        return permission;
      }
      return permission;
    }
}